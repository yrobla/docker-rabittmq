#!/bin/bash

# customize environment
echo "127.0.0.1 $HOSTNAME" | sudo tee --append /etc/workaround-docker-2267/hosts
CURRENT_HOST=${HOST//./-}
echo "127.0.0.1 $CURRENT_HOST" | sudo tee --append /etc/workaround-docker-2267/hosts
export HOSTNAME=$CURRENT_HOST
HOSTNAME=$CURRENT_HOST

echo "NODENAME=rabbit@$CURRENT_HOST" | sudo tee /etc/rabbitmq/rabbitmq-env.conf
echo "NODE_PORT=31672" | sudo tee --append /etc/rabbitmq/rabbitmq-env.conf
echo "DIST_PORT=31673" | sudo tee --append /etc/rabbitmq/rabbitmq-env.conf

# start rabbit
echo "Starting cluster"
if [ ! -z "$MARATHON_ENDPOINT" ]; then
    # curl the url and check if there is a host
    echo "Discovering configuration from $MARATHON_ENDPOINT"
    HOSTS=`curl -X GET -H "Content-Type: application/json" http://$MARATHON_ENDPOINT/v2/apps/yroblarabbitmq | grep -Po '"host":".*?[^"]"' | sed 's/^.*://' | sed 's/^"\(.*\)"$/\1/'`
    for entry in $HOSTS
    do
        if [ "$entry" != "$HOST" ]; then
            CLUSTER=$entry
        fi
    done
fi
echo "Found cluster [$CLUSTER]"
echo "Starting RabbitMQ"
if [[ -z "$CLUSTER" ]]; then
    # set ha policy
    sudo service rabbitmq-server start
    sleep 10
    rabbitmqctl set_policy ha-all "" '{"ha-mode":"all","ha-sync-mode":"automatic"}'
else
    # set entry in hosts for the cluster
    CURRENT_CLUSTER=${CLUSTER//./-}
    echo "$CLUSTER $CURRENT_CLUSTER" | sudo tee --append /etc/workaround-docker-2267/hosts
    sudo service rabbitmq-server start
    sleep 10

    sudo rabbitmqctl stop_app
    sudo rabbitmqctl reset
    sudo rabbitmqctl join_cluster --ram rabbit@$CURRENT_CLUSTER
    sudo rabbitmqctl start_app
    sleep 10

    # show cluster status
    sudo rabbitmqctl cluster_status
fi
# Infinite sleep loop to keep docker backgrounding happy
while true; do
sleep 1
done
